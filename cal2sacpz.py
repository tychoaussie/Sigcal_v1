__author__ = "Daniel Burk <burkdani@msu.edu>"
__version__ = "20140831"
__license__ = "MIT"


import os, sys, csv
from scipy import signal
from scipy.integrate import simps
import pylab as plt
import numpy as np
import scipy as sp
import time, string
import grid_search                         # Grid_search created by Hans Hartse, LANL
                                           # This module must be installed in the python lib
                                           # directory that is referenced by whatever python
                                           # you are running. It also has an Obspy dependency
                                           # So Obspy must be installed for it to run.
                                           # If you are running this in ipython notebooks
                                           # grid_search.py must be installed in c:/Anaconda/lib

                                           # from obspy.core import read, Trace, Stream, UTCDateTime
                                           # from obspy.sac import SacIO


class cal2sacpz(object):
    '''Cal2sacpz is a utility for converting Sigcal cal_output file generated by 
       the Sigcal program into a SAC poles & zeros file. It has several switches
       that enable you to fine-tune the grid search algorithm such as setting
       the constraints on modification of free-period, damping ratio, and signal
       amplitude in order to get a best-fitting pole-zero pair that represents the
       signal curve. Sigcal is generally set to default to a run of five iterations
       of grid searching and lets the algorithm pick the best fitting damping ratio
       and amplitude. Free period is by default constrained to whatever is measured
       within SigCal. This code will enable you to let the free period adjust as
       well to see if a better fitting curve can be generated. 
        

       Syntax: Cal2sacpz target_file  

       

       Typical useage:
       <ObsPy> C:\Python27\scripts> python Sigcal.py c:/calibration/station/ [outfputfile] [calconstfile]

    '''




                                   #                       Function load:
 
                                   # load the csv infile as generated by DAT2ASC with csv option
def load(infile):                                    
    with open(infile,'r') as fin:
        list = csv.reader(fin)
        rowcnt=0
        stack = []
        header = []
        for row in list:           # Bring in the data and create a list of lists, each of which                                  
            if rowcnt == 0:        # corresponds with a given sample.
                header.append(row)
            else:
                stack.append(row)
            rowcnt = 1
    return (header,stack)





                                   #                       Function getconstants:

def getconstants(calcontrol):      # From calcontrol file, retrieve the list of constants 
    constants = load(calcontrol)   # that relate these measurements to the real world.
    constant = constants[1][0]        # constants[0] contains headers that we don't really use
                                   # constant[0] = (text) Station: 'station name'
                                   # constant[1] = (float) adccal[0]: cal constant for ch 0 (microvolts / count)
                                   # constant[2] = (float) adccal[1]: cal constant for ch 1 (microvolts / count)
                                   # constant[3] = (float) adccal[2]: cal constant for ch 2 (microvolts / count)
                                   # constant[4] = (float) adccal[3]: cal constant for ch 3 (microvolts / count)
                                   # constant[5] = (float) laserres: cal constant for the laser ( mV / micron)
                                   # constant[6] = (float) lcalconst: cal constant for geometry correction factor
                                   # constant[7] = (float) h: Damping ratio for the seismometer as measured by engineer.
                                   # constant[8] = (float) resfreq: Free period resonance freq. as measured by engineer.
    return(constant)





#######################################################################################



def main():
                                      #           MAIN PROGRAM BODY
                                      #  Parse the command line switches
                                      # argv[0] = name of this program
                                      # argv[1] = input file name
                                      # argv[2] = nsearch parameter (see desc. below)
                                      # argv[3] = number of loops to run through
                                      # argv[4] = lowest multiple of the freeperiod freq to include in amplitude average
                                      # argv[5] = highest multiple of the freeperiod freq to include

# Commmand example: 
# c:\Python27>Python.exe cal2sacpz.py c:\seismo\caldata\momo\cal_output.cal 2 

                                      # where momo is the working directory containing the csv files
                                      # as well as the calibration control file, c:\seismo\caldta\calcontrol.csv
                                      # The third option can designate an optional location for the calcontrol file.
                                      #
    optioncount = len(sys.argv)
    outputfile_defined = False
    filelist = []
    dir=""
    infile = os.getcwd()+"\\calibration_output.cal"
#    outfile = os.getcwd()+"\calibration_output.cal"
#    calfile = os.getcwd()+"\calcontrol.cal"

                                          # Prepare to make the poles and zeroes from Hans Hartse gridsearch algorithm
                                          # Set up the control constants.

    nsearch = 2 # use measured freeperiod # 0: Full constraint on grid search to use MSU-measured amplitudes, damping ratio and free period.
                                          # 1: Optimize for amplitude w/i passband but constrain damping ratio and free period.
                                          # 2: Optimize amplitude w/i passband, optimize damping ratio, but constrain free period.
                                          # 3: Grid search for optimum amplitude, damping ratio AND free period
    coarse_search = 0.10                  # Typically 0.10
    fine_search = 0.005                   # Typically 0.005
    nloops = 5                            # Number of iterations through the grid (typically 4 or 5)
    ngrids = 20                           # Number of steps (typically 20)
    amp_units = "V*sec/m"
    amp_label = "Amplitude [" + amp_units + "]"
    lmult = 2
    hmult = 8


    if optioncount > 1:

        if optioncount >= 6:
            hmult = float(sys.argv[5])
        if optioncount >= 5:                          # Assume that output file has been designated            
            lmult = float(sys.argv[4])
        if optioncount >= 4:
            nloops = int(sys.argv[3])
        if optioncount >= 3:
            nsearch = int(sys.argv[2])
        if optioncount >=2:
            infile = sys.argv[1]
        else:
            print "Command usage: python cal2sacpz.py infile.cal [nsearch] [nloop] [lmult] [hmult]"
            print "Not enough parameters specified."
           

#        constant = getconstants(calfile)
                                                           # 
                                                           # Create the header for the calibration output file.
                                                           # Header contains the station name, ADC cal constants,
                                                           # Laser cal constant, the geometric correction factor,
                                                           # the damping ratio, and the free period frequency.
                                                           #
    fdata = load(infile)
    header = fdata[0]                     # The header contains the initial constants used for creation of the datafile
                                          # and includes the damping ratio, free period frequency, and channel calibration information
                                          # in this order:


    seismometer = fdata[0][0][0]              # Station name
                                          # fdata[0][0][1] # Channel 0 ADC sensitivity in microvolts / count
                                          # fdata[0][0][2] # Channel 1
                                          # fdata[0][0][3] # Channel 2
                                          # fdata[0][0][4] # Channel 3
                                          # fdata[0][0][5] # Laser position sensor in millivolts/micron
                                          # fdata[0][0][6] # Lcalconstant geometry correction factor

    msu_damp = float(fdata[0][0][7])      # h damping ratio
    msu_freep = float(fdata[0][0][8])     # Free period oscillation in Hz  
    freq_msu = []                         # Initialize the frequency array
    amp_msu = []                          # Initialize the matching amplitude array

    for i in range(0,len(fdata[1])):      #        Build the list of frequencies and sensitivities from the file.
        freq_msu.append(float(fdata[1][i][0]))     # Field 0 is the frequency
        amp_msu.append(float(fdata[1][i][1]))      # Field 1 is the average sensitivity

                                #    plot_curve(Station,Frequencies,Sensitivities,Freeperiod,h)
                                #    plot_curve2(Station,Frequencies,Calint,Calderiv,Freeperiod,h)

                                          # Perform the grid search and create the curve

    (resp,best_freep,best_damp,best_scale,amp_average,misfits,misfit_count,best_index) = \
     grid_search.find_pole_zero(freq_msu,amp_msu,seismometer,msu_freep,msu_damp,nsearch,\
     coarse_search,fine_search,nloops,ngrids,lmult,hmult)

                                          # Create the sac poles & zeros file

    sac_pz_file = os.getcwd() +'\\'+ seismometer + '.sacpz' # Set the file name to whatever station name is.
    grid_search.write_sacpz(sac_pz_file,resp)

                                          # Plot the data for the user.

    grid_search.plot_response_curves(resp,freq_msu,amp_msu,best_freep,best_damp,best_scale,\
    msu_freep,msu_damp,amp_average,amp_label,seismometer, sac_pz_file)


#
# Check and run the main function here:
#
if __name__ == '__main__':
  main()