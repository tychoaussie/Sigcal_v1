__author__ = "Daniel Burk <burkdani@msu.edu>"
__version__ = "20141126"
__license__ = "MIT"

import os, sys, csv

class Calconst(object):
    '''CALCONST is a utility for generating the calibration constants necessary for running
       the 20140715 version of sigcal.py, which takes a series of .csv files containing
       sinusoidal data from a seismometer and laser position sensor in order to fabricate
       a calibration curve sufficient for generating a calibation of poles and zeros.
       
       Useage: Install Python, then from the command prompt
       specify the target directory. No other options are valid. The program will generate
       a csv file named "calcontrol.cal" within the directory you specify. If no directory
       is specified, the file will be created in your current working directory. This file
       should then be placed within the directory along with the series of csv files
       representing your calibration data.

       Syntax: Calconst.py c:\seismo\calibration\ 

       
       Typical useage:
       <ObsPy> C:\Python27\scripts> python Calconst.py c:\seismo\calibration\

    '''
                                  # load the csv infile as generated by DAT2ASC with csv option
def load(infile):                                    
    with open(infile,'r') as fin:
        list = csv.reader(fin)
        rowcnt=0
        stack = []
        header = []
        for row in list:           # Bring in the data and create a list of lists, each of which                                  
            if rowcnt == 0:        # corresponds with a given sample.
                header.append(row)
            else:
                stack.append(row)
            rowcnt = 1
    return (header,stack)



                                   # Function getconstants:
def getconstants(calcontrol):      # From calcontrol file, retrieve the list of constants 
    constants = load(calcontrol)   # that relate these measurements to the real world.
    constant = constants[1]        # constants[0] contains headers that we don't really use
                                   # constant[0] = (text) Station: 'station name'
                                   # constant[1] = (float) adccal[0]: cal constant for ch 0 (microvolts / count)
                                   # constant[2] = (float) adccal[1]: cal constant for ch 1 (microvolts / count)
                                   # constant[3] = (float) adccal[2]: cal constant for ch 2 (microvolts / count)
                                   # constant[4] = (float) adccal[3]: cal constant for ch 3 (microvolts / count)
                                   # constant[5] = (float) laserres: cal constant for the laser ( mV / micron)
                                   # constant[6] = (float) lcalconst: cal constant for geometry correction factor
                                   # constant[7] = (float) h: Damping ratio for the seismometer as measured by engineer.
                                   # constant[8] = (float) resfreq: Free period resonance freq (Hz). as measured by engineer.
    return(constant)

def process(infile,outfile):

    fdata = load(infile[filenum])     # Load the infile currently loaded with 1 Hz data
    header = fdata[0]
    constants = getconstants(calfile) # Retrieve the constants from the file


    Station = constant[0]             # Name of Station under test
    for i in rang(0,4):
        adccal[i] = constant[i+1]     # Calibration constants for the ADC channels as measured by engineer
                                      # for this particular system. Each one is unique.
    laserres = constant[5]            # CALIBRATED value from laser position sensor in mV/micron
    lcalconst = constant[6]           # Typ. 0.535, for the SM3, based on the geometry of the laser target 
                                      # and center of mass relative to radius of moment arm.
                                      # It is the ratio of distances to center of mass / laser target
    h = constant[7]                   # typically about 0.7 but MUST be accurately measured beforehand!
    resfreq = constant[8]             # Typically between 0.7 and 1.3 Hz. Expressed in Hz, not seconds.
    Rn = np.pi * 2 * resfreq          # Free period as expressed in radians / second                      
    lasercal = laserres/1000          # microns / count from the CALIBRATED laser and CALIBRATED ADC.










def main():
                                  # MAIN PROGRAM BODY

                                  #  Parse the command line switches
                                  # Commmand example: 
                                  # c:\Python27>Python.exe Calconst.py c:\seismo\caldata\momo\
                                  # where momo is the working directory. 
                                  # No file extension will create the file in the current 
                                  # working directory.
    optioncount = len(sys.argv)    
    calcontrol = os.getcwd()+"\calcontrol.cal"

    if optioncount > 1:           # If there are switches, check the first one only.                           
        if optioncount == 2:
            if "\\" in sys.argv[1]:
                calcontrol = sys.argv[1]+"\calcontrol.cal"

                                  # Scan to see if file exists. If so, load it for defaults.
                                  #

#       main execution code goes here for parsing through all the files in filelist.
#                                 # Populate the header
    header = []
    header.append('Station')
    header.append('ch0cal')
    header.append('ch1cal')
    header.append('ch2cal')
    header.append('ch3cal')
    header.append('laserres')
    header.append('lcalconst')
    header.append('h')
    header.append('resfreq')
                                   # Populate the array
    constant = []

    try:
        constant.append(str(raw_input('Please enter the station name. ')))
    except ValueError:
        print "Please enter appropriate characters. Station name set to 'unknown'."
        constant.append("unknown")

    try:
        constant.append(float(raw_input('Enter the channel 0 calibration value:  ')))
    except ValueError:
        print "Error! Value must be a floating point number."
        print "Calibration number being set to 0.9425 as a default."
        constant.append(float(0.9425))

    try:
        constant.append(float(raw_input('Enter the channel 1 calibration value:  ')))
    except ValueError:
        print "Error! Value must be a floating point number."
        print "Calibration number being set to 0.9425 as a default."
        constant.append(float(0.9425))

    try:
        constant.append(float(raw_input('Enter the channel 2 calibration value:  ')))
    except ValueError:
        print "Error! Value must be a floating point number."
        print "Calibration number being set to 0.9425 as a default."
        constant.append(float(0.9425))

    try:
        constant.append(float(raw_input('Enter the channel 3 calibration value:  ')))
    except ValueError:
        print "Error! Value must be a floating point number."
        print "Calibration number being set to 0.9425 as a default."
        constant.append(float(0.9425))

    try:
        constant.append(float(raw_input('Enter the laser resolution cal constant:  ')))
    except ValueError:
        print "Error! Value must be a floating point number."
        print "Calibration number being set to 0.9932 as a default for LK031 laser."
        constant.append(float(0.9932))

    try:
        constant.append(float(raw_input('Enter the geometry correction constant:  ')))
    except ValueError:
        print "Error! Value must be a floating point number."
        print "Calibration number being set to 0.535 as a default for SM3."
        constant.append(float(0.535))

    try:
        constant.append(float(raw_input('Enter the measured damping ratio h:  ')))
    except ValueError:
        print "Error! Value must be a floating point number."
        print "Calibration number being set to 0.715 as a default."
        constant.append(float(0.715))

    try:
        constant.append(float(raw_input('Enter the measured free period frequency in Hz:  ')))
    except ValueError:
        print "Error! Value must be a floating point number."
        print "Calibration number being set to 0.8331 as a default."
        constant.append(float(0.8331))      
    
                          # constant[0] = (text) Station: 'station name'
                          # constant[1] = (float) adccal[0]: cal constant for ch 0 (microvolts / count)
                          # constant[2] = (float) adccal[1]: cal constant for ch 1 (microvolts / count)
                          # constant[3] = (float) adccal[2]: cal constant for ch 2 (microvolts / count)
                          # constant[4] = (float) adccal[3]: cal constant for ch 3 (microvolts / count)
                          # constant[5] = (float) laserres: cal constant for the laser ( mV / micron)
                          # constant[6] = (float) lcalconst: cal constant for geometry correction factor
                          # constant[7] = (float) h: Damping ratio for the seismometer as measured by engineer.
                          # constant[8] = (float) resfreq: Free period resonance freq. as measured by engineer.

                          # Write out the new variables to the file.

    with open(calcontrol,'wb') as csvfile: # use 'wb' in place of 'a' if you want to overwrite the file.
         outrow = csv.writer(csvfile, delimiter = ",",
                      quotechar='|', quoting=csv.QUOTE_MINIMAL)
         outrow.writerow(header)
         outrow.writerow(constant)

    print " Cal control written to:",calcontrol


#
# Check and run the main function here:
#
if __name__ == '__main__':
  main()

